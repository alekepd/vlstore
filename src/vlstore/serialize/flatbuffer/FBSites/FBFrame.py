# ruff: noqa
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBSites

import flatbuffers # type: ignore
from flatbuffers.compat import import_numpy  # type: ignore
np = import_numpy()

class FBFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBFrame()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFBFrame(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FBFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBFrame
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FBFrame
    def Nsites(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBFrame
    def Ncodim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 3

    # FBFrame
    def Types(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBFrame
    def TypesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # FBFrame
    def TypesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBFrame
    def TypesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FBFrame
    def Masses(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBFrame
    def MassesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBFrame
    def MassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBFrame
    def MassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # FBFrame
    def Positions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBFrame
    def PositionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBFrame
    def PositionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBFrame
    def PositionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # FBFrame
    def Forces(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBFrame
    def ForcesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBFrame
    def ForcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBFrame
    def ForcesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def FBFrameStart(builder):
    builder.StartObject(7)

def Start(builder):
    FBFrameStart(builder)

def FBFrameAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    FBFrameAddName(builder, name)

def FBFrameAddNsites(builder, nsites):
    builder.PrependInt32Slot(1, nsites, 0)

def AddNsites(builder, nsites):
    FBFrameAddNsites(builder, nsites)

def FBFrameAddNcodim(builder, ncodim):
    builder.PrependInt32Slot(2, ncodim, 3)

def AddNcodim(builder, ncodim):
    FBFrameAddNcodim(builder, ncodim)

def FBFrameAddTypes(builder, types):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(types), 0)

def AddTypes(builder, types):
    FBFrameAddTypes(builder, types)

def FBFrameStartTypesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartTypesVector(builder, numElems):
    return FBFrameStartTypesVector(builder, numElems)

def FBFrameAddMasses(builder, masses):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(masses), 0)

def AddMasses(builder, masses):
    FBFrameAddMasses(builder, masses)

def FBFrameStartMassesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMassesVector(builder, numElems):
    return FBFrameStartMassesVector(builder, numElems)

def FBFrameAddPositions(builder, positions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(positions), 0)

def AddPositions(builder, positions):
    FBFrameAddPositions(builder, positions)

def FBFrameStartPositionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPositionsVector(builder, numElems):
    return FBFrameStartPositionsVector(builder, numElems)

def FBFrameAddForces(builder, forces):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(forces), 0)

def AddForces(builder, forces):
    FBFrameAddForces(builder, forces)

def FBFrameStartForcesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartForcesVector(builder, numElems):
    return FBFrameStartForcesVector(builder, numElems)

def FBFrameEnd(builder):
    return builder.EndObject()

def End(builder):
    return FBFrameEnd(builder)
