# ruff: noqa
# automatically generated by the FlatBuffers compiler, do not modify

# namespace: FBNList

import flatbuffers  # type: ignore
from flatbuffers.compat import import_numpy  # type: ignore

np = import_numpy()


class FBNList(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBNList()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFBNList(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # FBNList
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBNList
    def Tag(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FBNList
    def Order(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FBNList
    def IndexMapping(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # FBNList
    def IndexMappingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FBNList
    def IndexMappingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBNList
    def IndexMappingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FBNList
    def CellShifts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Float32Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4),
            )
        return 0

    # FBNList
    def CellShiftsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBNList
    def CellShiftsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBNList
    def CellShiftsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FBNList
    def Rcut(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # FBNList
    def SelfInteraction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(
                self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
            )
        return False

    # FBNList
    def MappingBatch(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Int64Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8),
            )
        return 0

    # FBNList
    def MappingBatchAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # FBNList
    def MappingBatchLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBNList
    def MappingBatchIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0


def FBNListStart(builder):
    builder.StartObject(7)


def Start(builder):
    FBNListStart(builder)


def FBNListAddTag(builder, tag):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(tag), 0
    )


def AddTag(builder, tag):
    FBNListAddTag(builder, tag)


def FBNListAddOrder(builder, order):
    builder.PrependInt32Slot(1, order, 0)


def AddOrder(builder, order):
    FBNListAddOrder(builder, order)


def FBNListAddIndexMapping(builder, indexMapping):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(indexMapping), 0
    )


def AddIndexMapping(builder, indexMapping):
    FBNListAddIndexMapping(builder, indexMapping)


def FBNListStartIndexMappingVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartIndexMappingVector(builder, numElems):
    return FBNListStartIndexMappingVector(builder, numElems)


def FBNListAddCellShifts(builder, cellShifts):
    builder.PrependUOffsetTRelativeSlot(
        3, flatbuffers.number_types.UOffsetTFlags.py_type(cellShifts), 0
    )


def AddCellShifts(builder, cellShifts):
    FBNListAddCellShifts(builder, cellShifts)


def FBNListStartCellShiftsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)


def StartCellShiftsVector(builder, numElems):
    return FBNListStartCellShiftsVector(builder, numElems)


def FBNListAddRcut(builder, rcut):
    builder.PrependFloat64Slot(4, rcut, 0.0)


def AddRcut(builder, rcut):
    FBNListAddRcut(builder, rcut)


def FBNListAddSelfInteraction(builder, selfInteraction):
    builder.PrependBoolSlot(5, selfInteraction, 0)


def AddSelfInteraction(builder, selfInteraction):
    FBNListAddSelfInteraction(builder, selfInteraction)


def FBNListAddMappingBatch(builder, mappingBatch):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(mappingBatch), 0
    )


def AddMappingBatch(builder, mappingBatch):
    FBNListAddMappingBatch(builder, mappingBatch)


def FBNListStartMappingBatchVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)


def StartMappingBatchVector(builder, numElems):
    return FBNListStartMappingBatchVector(builder, numElems)


def FBNListEnd(builder):
    return builder.EndObject()


def End(builder):
    return FBNListEnd(builder)
